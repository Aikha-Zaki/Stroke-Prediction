# -*- coding: utf-8 -*-
"""Stroke_Phyton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XpSZWb7aiDsewcrX8wfGoS7A5h_SgLgk
"""

import pandas as pd
import numpy as np 
import copy

#read dataste
dataset=pd.read_csv("/content/full_data.csv")

#duplicate
df=copy.copy(dataset)
type(df)

df.head()

df.columns

df.describe()

#data structure
df.info()

# convert hypertension, heart_disease, and stroke to categoriacal data
# df['Marks'] = df['Marks'].astype(str)
# df = df.astype({"Age": 'str', "Accuracy": 'str'}) 
# df.dtypes
# type(df)
toConvert = ['hypertension','heart_disease','stroke']
df[toConvert] = df[toConvert].astype(str)
df.head()

df.dtypes

"""Visualization with SweetVis"""

!pip install sweetviz

#import library

import sweetviz as viz
import seaborn as sns 
import matplotlib.pyplot as plt

# analyze the dataset
full_report = viz.analyze(df)

# display the report
full_report.show_html('Full_report.html')
full_report.show_notebook()

# Compare stroke and without stroke
# a = df [df['stroke'] == '1']
# b = df [df['stroke'] == '0']
compare_report = viz.compare([df[df['stroke']=='1'],'With Stroke'],[df[df['stroke'] == '0'],'Without Stroke']) 
compare_report.show_notebook()

"""Machine Learning"""

# ML model
from sklearn.naive_bayes import GaussianNB 
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

# Splitter
from sklearn.model_selection import train_test_split

# Reporting
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report 
from sklearn.metrics import confusion_matrix
from sklearn import metrics

# plotting
import matplotlib.pyplot as plt

"""Split data to training and test dataframe"""

# Split data to training and test dataframe
X = df.drop('stroke', axis=1)  
y = df['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

"""Visualize training-testing dataset"""

# display training and testing dataset
compare_dataset_report = viz.compare([X_train, 'Train'], [X_test, 'Test'])
compare_dataset_report.show_notebook()

X_train.dtypes

"""Encode categorical data

"""

# Encode categorical data
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['gender'] = le.fit_transform(df['gender'])
df['hypertension'] = le.fit_transform(df['hypertension'])
df['heart_disease'] = le.fit_transform(df['heart_disease'])
df['ever_married'] = le.fit_transform(df['ever_married'])
df['work_type'] = le.fit_transform(df['work_type'])
df['Residence_type'] = le.fit_transform(df['Residence_type'])
df['smoking_status'] = le.fit_transform(df['smoking_status'])
# df['stroke'] = le.fit_transform(df['stroke'])
print(df.dtypes)

# Split data to training and test dataframe - after encoded
X = df.drop('stroke', axis=1)  
y = df['stroke']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=100)

"""Gaussian Naives Bayes"""

# Gaussian Naives Bayes
model_gaussian = GaussianNB()                      
model_gaussian.fit(X_train, y_train)                  
y_gaussian = model_gaussian.predict(X_test)

#Score 
train_score = model_gaussian.score(X_train, y_train)
test_score = model_gaussian.score(X_test, y_test)

print("=====================")
print("Gaussian Naives Bayes")
print("=====================")

# Evaluation
print(f'Training Score: {train_score.round(3)}')
print(f'Testing Score: {test_score.round(3)}')
print(f'Accuracy Score: {accuracy_score(y_test,y_gaussian).round(3)}')
# print("Gaussian model test accuracy: {}\n".format(accuracy_score(y_test, y_gaussian)))

print("\nClassification Report:\n{}".format(classification_report(y_test, y_gaussian))) 

confusion_matrix = metrics.confusion_matrix(y_test, y_gaussian)
print("Confusion matrix:\n{}\n".format(confusion_matrix))

print("Plot Confusion matrix:")
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix,display_labels=np.unique(y))
cm_display.plot()
plt.show()

"""KNN"""

# KNN
knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train, y_train)
knn.score(X_test, y_test)

y_knn = knn.predict(X_test)


print("KNN model test accuracy: {}\n".format(accuracy_score(y_test, y_knn)))
print("Classification Report:\n{}".format(classification_report(y_test, y_knn))) 

confusion_matrix = metrics.confusion_matrix(y_test, y_knn)
print("Confusion matrix:\n{}\n".format(confusion_matrix))

print("Plot Confusion matrix:")
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix,display_labels=np.unique(y))
cm_display.plot()
plt.show()

"""SVM"""

svm_model = SVC(kernel='rbf', C=1).fit(X_train, y_train)
y_svm = svm_model.predict(X_test)

#Score 
train_score = svm_model.score(X_train, y_train)
test_score = svm_model.score(X_test, y_test)

print("=====================")
print("SVM")
print("=====================")

# Evaluation
print(f'Training Score: {train_score.round(3)}')
print(f'Testing Score: {test_score.round(3)}')
print(f'Accuracy Score: {accuracy_score(y_test,y_svm).round(3)}')
# print("Gaussian model test accuracy: {}\n".format(accuracy_score(y_test, y_gaussian)))

print("\nClassification Report:\n{}".format(classification_report(y_test, y_svm))) 

confusion_matrix = metrics.confusion_matrix(y_test, y_svm)
print("Confusion matrix:\n{}\n".format(confusion_matrix))

print("Plot Confusion matrix:")
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix,display_labels=np.unique(y))
cm_display.plot()
plt.show()

"""Random Forest"""

# Random Forest
rfc = RandomForestClassifier(n_estimators = 100)
rfc.fit(X_train, y_train)

#Score 
rfc_score = rfc.score(X_train, y_train)
rfc_test = rfc.score(X_test, y_test)

# Model Testing
y_pred = rfc.predict(X_test)

print("=============")
print("Random Forest")
print("=============")
# Evaluation
# rfc_cm = confusion_matrix(y_test,y_pred)
print(f'Training Score: {rfc_score.round(3)}')
print(f'Testing Score: {rfc_test.round(3)}')

# conf_matrix = pd.DataFrame(data=rfc_cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])
print(f'Accuracy Score: {accuracy_score(y_test,y_pred).round(3)}')

# print("Random Forest model accuracy: {}\n".format(accuracy_score(y_test, y_pred)))
print("Classification Report:\n{}".format(classification_report(y_test, y_pred))) 

confusion_matrix = metrics.confusion_matrix(y_test, y_pred)
print("Confusion matrix:\n{}\n".format(confusion_matrix))

print("Plot Confusion matrix:")
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix,display_labels=np.unique(y))
cm_display.plot()
plt.show()